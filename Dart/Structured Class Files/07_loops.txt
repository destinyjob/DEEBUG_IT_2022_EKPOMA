//AUTHOR: Deebug Institute

LOOPS

Loops can execute a block of code as long as a specified condition is true.
Loops are an integral part of software development. If you want to run the same code over and over again, each time with a different value, a loop will get the job done.
Dart supports different kinds of loops:

FOR LOOPS
The for loop has the following syntax:
    for(initialization; condition; increment/decrement){
       //code block
    }
    
EXAMPLE
    for(int counter = 0; counter<=100; counter++){
      print(counter);
    }

WHILE LOOP
The while loop loops through a block of code as long as a specified condition is true.
while (condition) {
  // code block to be executed
}

Example:
void main(){
    int yourNumber = 1;
    while (yourNumber <= 10) {
      print("The number is: $yourNumber");  //concatenates yourNumber variable to the String
      yourNumber++;
    }
}
Note: If you forget to alter the variable used in the condition, the loop will never end.


DO WHILE LOOP
The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.

do {
  // code block to be executed
}
while (condition);


BREAK
Break helps you manipulate the flow of the loop. The break statement is used to take the control out of a construct. Using break in a loop causes the program to exit the loop (and not a conditional statement).
Example:

void main(){
  int count = 1;
  while (count <= 10) {
    print("You are inside loop $count");
    count++;

    if (count == 4) {
        break;
    }
  }
  print("You are out of while loop");
}


CONTINUE
Continue helps you to manipulate the flow of the loop. The continue statement skips the subsequent statements in the current iteration and takes the control back to the the start of the loop. Unlike the break statement, the continue statement doesn't exit the loop. It terminates the current iteration and starts the subsequent iteration.
Example: 
void main(){
  for (int i = 1; i <= 7; ++i) {
      if (i == 5) {
          print("You are inside loop $i Debugger");
          continue;
      }
  /* This print statement would not execute for the
  * loop iteration where i==5  because in that case
  * this statement would be skipped.
  */
      print(i);
  }
  print("You are out of the loop Debugger");
}



TRY THIS OUT YOURSELF:
void main(){
  int count = 0;

  while (count < 10) {
    count++;
    
    if(count == 4) {
      print("Number 4 is been skipped");
      continue;
    }

    print("Debugger, you are inside loop $count");
  }
  print("\nDebugger, you are out of the while loop");
}
