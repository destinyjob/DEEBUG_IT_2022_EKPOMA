//AUTHOR: Deebug Institute


UNDERSTANDING NULL SAFETY
Null safety was introduced in Dart 2.12. Null safety is a major new productivity feature that helps you avoid null exceptions, a class of bugs that are often hard to spot. As an added bonus, this feature also enables a range of performance improvements. Nullable variables are a good way of expressing the absence of a value, and this is useful in many APIs.

Why null safety?
Dart is a type-safe language. This means that when you get a variable of some type, the compiler can guarantee that it is of that type. But type safety by itself doesn’t guarantee that the variable is not null.

Example
If null safety is enabled, trying to assign a null value to a variable would throw an error.
String username; //This would not work


So to handle this, you either disable null safety (by adding “// @dart=2.10” at the top of your working file) or make the variable nullable by adding ? after the datatype:
String? username; //This variable has been made nullable


We can use the assertion operator !  to assign a nullable expression to a non-nullable variable:
int? maybeValue = 42;
int value = maybeValue!; 	//valid, value is non-nullable



Null-aware assignment operator "??="
It assigns a value to the variable only if the variable is null.
Its similar in operation to the “if null operator - ??” 

EXAMPLE
  print(1 ?? 3); // <-- Prints 1
  print(null ?? 12); // <-- Prints 12

EXAMPLE
  String company;
  String name;
  company = company ?? "Deebug Institute";
  print(company);

EXAMPLE
  String name = "Deebug"; 
  name ??= "Institute";
  print(name);

EXAMPLE
  String name; 
  name ??= "Institute";
  print(name);
